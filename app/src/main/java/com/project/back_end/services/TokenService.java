package com.project.back_end.services;

import com.project.back_end.repo.AdminRepository;
import com.project.back_end.repo.DoctorRepository;
import com.project.back_end.repo.PatientRepository;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Date;

@Component
public class TokenService {
    // 1. **@Component Annotation**
    // The @Component annotation marks this class as a Spring component, meaning Spring will manage it as a bean within its application context.
    // This allows the class to be injected into other Spring-managed components (like services or controllers) where it's needed.

    // 2. **Constructor Injection for Dependencies**
    // The constructor injects dependencies for `AdminRepository`, `DoctorRepository`, and `PatientRepository`,
    // allowing the service to interact with the database and validate users based on their role (admin, doctor, or patient).
    // Constructor injection ensures that the class is initialized with all required dependencies, promoting immutability and making the class testable.

    private AdminRepository adminRepository;
    private DoctorRepository doctorRepository;
    private PatientRepository patientRepository;
    private String jwtSecret; // configured in application properties: jwt.secret


    public TokenService(AdminRepository adminRepository,
                        DoctorRepository doctorRepository,
                        PatientRepository patientRepository,
                        @Value("${jwt.secret}") String jwtSecret) {
        this.adminRepository = adminRepository;
        this.doctorRepository = doctorRepository;
        this.patientRepository = patientRepository;
        this.jwtSecret = jwtSecret;
    }

    // 3. **getSigningKey Method**
    // This method retrieves the HMAC SHA key used to sign JWT tokens.
    // It uses the `jwt.secret` value, which is provided from an external source (like application properties).
    // The `Keys.hmacShaKeyFor()` method converts the secret key string into a valid `SecretKey` for signing and verification of JWTs.

    public SecretKey getSigningKey() {
        byte[] keyBytes = jwtSecret.getBytes(StandardCharsets.UTF_8);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    // 4. **generateToken Method**
    // This method generates a JWT token for a user based on their email.
    // - The `subject` of the token is set to the user's email, which is used as an identifier.
    // - The `issuedAt` is set to the current date and time.
    // - The `expiration` is set to 7 days from the issue date, ensuring the token expires after one week.
    // - The token is signed using the signing key generated by `getSigningKey()`, making it secure and tamper-proof.
    // The method returns the JWT token as a string.

    public String generateToken(String email) {
        Date now = new Date();
        Date exp = new Date(now.getTime() + Duration.ofDays(7).toMillis());
        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(now)
                .setExpiration(exp)
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // 5. **extractEmail Method**
    // This method extracts the user's email (subject) from the provided JWT token.
    // - The token is first verified using the signing key to ensure it hasnâ€™t been tampered with.
    // - After verification, the token is parsed, and the subject (which represents the email) is extracted.
    // This method allows the application to retrieve the user's identity (email) from the token for further use.

    public String extractEmail(String token) {
        Claims claims = Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
        return claims.getSubject();
    }

    // 6. **validateToken Method**
    // This method validates whether a provided JWT token is valid for a specific user role (admin, doctor, or patient).
    // - It first extracts the email from the token using the `extractEmail()` method.
    // - Depending on the role (`admin`, `doctor`, or `patient`), it checks the corresponding repository (AdminRepository, DoctorRepository, or PatientRepository)
    //   to see if a user with the extracted email exists.
    // - If a match is found for the specified user role, it returns true, indicating the token is valid.
    // - If the role or user does not exist, it returns false, indicating the token is invalid.
    // - The method gracefully handles any errors by returning false if the token is invalid or an exception occurs.
    // This ensures secure access control based on the user's role and their existence in the system.


    public boolean validateToken(String token, String role) {
        try {
            String email = extractEmail(token);
            if (email == null || email.isBlank() || role == null) return false;
            switch (role.toLowerCase()) {
                case "admin":   return existsAdminByEmail(email);
                case "doctor":  return existsDoctorByEmail(email);
                case "patient": return existsPatientByEmail(email);
                default:        return false;
            }
        } catch (ExpiredJwtException | SecurityException | IllegalArgumentException e) {
            return false;
        }
    }

    private boolean existsAdminByEmail(String email) {
        try { return adminRepository.existsByEmail(email); } catch (Throwable ignored) {}
        try { return adminRepository.findByEmail(email).isPresent(); } catch (Throwable ignored) {}
        return false;
    }
    private boolean existsDoctorByEmail(String email) {
        try { return doctorRepository.existsByEmail(email); } catch (Throwable ignored) {}
        try { return doctorRepository.findByEmailIgnoreCase(email).isPresent(); } catch (Throwable ignored) {}
        try { return doctorRepository.findByEmail(email).isPresent(); } catch (Throwable ignored) {}
        return false;
    }
    private boolean existsPatientByEmail(String email) {
        try { return patientRepository.existsByEmail(email); } catch (Throwable ignored) {}
        try { return patientRepository.findByEmailIgnoreCase(email).isPresent(); } catch (Throwable ignored) {}
        try { return patientRepository.findByEmail(email).isPresent(); } catch (Throwable ignored) {}
        return false;
    }
}
